#!/bin/bash
# set -eux
set -eu

# Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'     # Cyan
White='\033[0;37m'     # Cyan
NC='\033[0m' # No Color

# Netcup URLs
# https://www.netcup-wiki.de/wiki/Netcup_SCP_Webservice
netcup_scp_domain="www.servercontrolpanel.de"
netcup_wsdl="https://www.servercontrolpanel.de/WSEndUser?wsdl"
netcup_api="https://www.servercontrolpanel.de/WSEndUser"
netcup_server_list='<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://enduser.service.web.vcp.netcup.de/"><SOAP-ENV:Body><ns1:getVServers><loginName>{{ netcup_login_name }}</loginName><password>{{ netcup_password }}</password></ns1:getVServers></SOAP-ENV:Body></SOAP-ENV:Envelope>'

netcup_ipv4_failover='<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://enduser.service.web.vcp.netcup.de/"><SOAP-ENV:Body><ns1:changeIPRouting><loginName>{{ netcup_login_name }}</loginName><password>{{ netcup_password }}</password><routedIP>{{ netcup_routed_ip }}</routedIP><routedMask>32</routedMask><destinationVserverName>{{ vserver_id }}</destinationVserverName><destinationInterfaceMAC>{{ vserver_mac }}</destinationInterfaceMAC></ns1:changeIPRouting></SOAP-ENV:Body></SOAP-ENV:Envelope>'
netcup_ipv6_failover='<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://enduser.service.web.vcp.netcup.de/"><SOAP-ENV:Body><ns1:changeIPRouting><loginName>{{ netcup_login_name }}</loginName><password>{{ netcup_password }}</password><routedIP>{{ netcup_routed_ip6 }}</routedIP><routedMask>64</routedMask> <destinationVserverName>{{ vserver_id }}</destinationVserverName><destinationInterfaceMAC>{{ vserver_mac }}</destinationInterfaceMAC></ns1:changeIPRouting></SOAP-ENV:Body></SOAP-ENV:Envelope>'
netcup_ips='<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://enduser.service.web.vcp.netcup.de/"><SOAP-ENV:Body><ns1:getVServerIPs><loginName>{{ netcup_login_name }}</loginName><password>{{ netcup_password }}</password><vserverName>{{ vserver_id }}</vserverName></ns1:getVServerIPs></SOAP-ENV:Body></SOAP-ENV:Envelope>'

# Keepalived stuff
backup="BACKUP"
master="MASTER"
keepalived_status="/tmp/keepalived.status"
keepalived_procs=$(ps uax|grep '/usr/sbin/keepalived'|grep -v grep|wc -l|tr -d "\n")
keepalived_master=$(grep -o "$master" "$keepalived_status" | wc -l)

# Failover Process
# StatusCode 200 indicates operation has been triggered
# StatusCode 500 indicates operation isn't available, cause IP might be already switched

# Execute SOAP Action getVServers to check reachability
check-api() {
  curl -s -o /dev/null -w '%{http_code}' -m 10 -H 'Content-Type: text/xml; charset=utf-8' -H 'SOAPAction:' -d "${netcup_server_list}" -X POST "${netcup_api}"
}

check-ips() {
  curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 30 -s -H "Content-Type: text/xml; charset=utf-8" -H "SOAPAction:" -d "${netcup_ips}" -X POST "${netcup_api}"
}

failover-ipv4(){
  echo -e "FailoverIPv4: ☐ Change FailoverIPv4 Routing to {{ netcup_routed_ip }}${NC}"
  time curl -m 20 -s -o /dev/null -w '%{http_code}' -H 'Content-Type: text/xml; charset=utf-8' -H 'SOAPAction:' -d "${netcup_ipv4_failover}" -X POST "${netcup_api}"
}

failover-ipv6(){
  echo -e "FailoverIPv6: ☐ Change FailoverIPv6 Routing to {{ netcup_routed_ip6 }}${NC}"
  time curl -m 20 -s -o /dev/null -w '%{http_code}' -H 'Content-Type: text/xml; charset=utf-8' -H 'SOAPAction:' -d "${netcup_ipv6_failover}" -X POST "${netcup_api}"
}

wait_seconds=600

wait-for-api() {
  while true
  do
    api_status=$(check-api)
    if [ "${api_status}" -eq 200 ]; then
      echo -e "API Check: ✓ Netcup API is reachable!"
      break
    else
      echo -e "API Check: ✗ Got ${api_status} :( Not done yet..."
    fi
    sleep 10
  done
}

main() {

  while true
  do
    echo "Keepalived Watcher: Checking Failover"
    if [[ $keepalived_master -gt 0 ]] && [[ ${keepalived_procs} -gt 0 ]]; then
      check_result=$(check-ips)
       {% if netcup_routed_ip|length %}
      failover_ip4_active=$(echo ${check_result} | grep -o -i {{ netcup_routed_ip }} | wc -l)
    {% else %}
      failover_ip4_active=1
    {% endif %}
    {% if netcup_routed_ip6|length %}
      failover_ip6_active=$(echo ${check_result} | grep -o -i {{ netcup_routed_ip6 }} | wc -l)
    {% else %}
      failover_ip6_active=1
    {% endif %}
      while [[ ${failover_ip4_active} -ne 1 || ${failover_ip6_active} -ne 1 ]] && grep -q "${master}" "${keepalived_status}"
        do
          wait-for-api
    {% if netcup_routed_ip|length %}
          failover-ipv4
    {% endif %}
    {% if netcup_routed_ip6|length %}
          failover-ipv6
    {% endif %}
          sleep 5
          check_result=$(check-ips)
  {% if netcup_routed_ip|length %}
          failover_ip4_active=$(echo ${check_result} | grep -o -i {{ netcup_routed_ip }} | wc -l)
  {% endif %}
  {% if netcup_routed_ip6|length %}
          failover_ip6_active=$(echo ${check_result} | grep -o -i {{ netcup_routed_ip6 }} | wc -l)
  {% endif %}
        done
   fi
   sleep $wait_seconds
  done
}


# For Debug
# main() {
#   sleep infinity
# }

main
